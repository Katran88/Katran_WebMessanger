<link type="text/css" rel="stylesheet" href="/bootstrap/css/generalStyles.css" />
<style>

    .contact_div
    {
        width: 303px;
        max-height: 66px;
    }

    .search_contact_div
    {
        width: 303px;
        max-height: 66px;
    }

    .contact
    {
        height: 60px;
        max-height: 60px;
        padding: 5px 5px;
        display: flex;
        vertical-align: baseline;
        background: var(--mainbackground-color);
        transition: .5s ease;
        border-radius: 5px;
    }

    h6
    {
        margin-top: 6px;
        margin-bottom: 0;
    }

    p
    {
        margin: 0;
    }

    .contact:hover
    {
        /*background: var(--blue-color);*/
        cursor: pointer;
    }

    #current_contacts
    {
        height: 807px;
        overflow-y: auto;
        overflow-x: hidden;
    }

</style>

<div style=" margin-top: 10px; width: 303px; height: 70px">
    <div class="input-group mb-3">
        <input type="text" class="form-control" id="contactTabSearchInput" placeholder="Search for contact" oninput="contactSearch()">
        <button class="btn btn-secondary" type="button" onclick="contactSearch()" > <i class="bi bi-search" style="font-size: 15px";></i> </button>
    </div>
    <i class="bi bi-person-dash-fill" onclick="deleteFromChats(selectedChatNode)" id="deleteFromContactsBtn"
       style="color: var(--dark-grey-color); position: absolute; top: 95px; left: 260px; visibility: hidden" ; ></i>
    <hr/>
</div>



<div id="current_contacts" >

</div>

<script>
    const contacts_div = document.getElementById('current_contacts');
    const contactTabSearchInput = document.getElementById('contactTabSearchInput');
    let selectedChatNode = null;
    let canSendReqForSearch = true;

    function checkContactTabSearchInput()
    {
        const search_value = contactTabSearchInput.value;
        if(contactTabSearchInput.value)
        {
            let newSearchString = "";
            for (let i = 0; i < search_value.length; i++)
            {
                if(search_input_field_reg.test(search_value[i]))
                {
                    newSearchString += search_value[i];
                }
                else
                {
                    newSearchString = "";
                    break;
                }
            }

            contactTabSearchInput.value = newSearchString;
        }
    }

    async function contactSearch()
    {
        checkContactTabSearchInput()
        const searchString = contactTabSearchInput.value;

        if(searchString)
        {
            let suitableContactsAmount = 0;
            for (let i = 0; i < contacts_div.children.length; i++)
            {
                if( contacts_div.children[i].className == 'contact_div')
                {
                    if(contacts_div.children[i].dataset.username.toLowerCase().indexOf(searchString.toLowerCase()) >= 0)
                    {
                        contacts_div.children[i].style.display = 'inline-block';
                        suitableContactsAmount++;
                    }
                    else
                    {
                        contacts_div.children[i].style.display = 'none';
                    }
                }
            }

            if(suitableContactsAmount == 0 && canSendReqForSearch && searchString.length >= 2)
            {
                canSendReqForSearch = false;
                clearSearchedContactsHTML();
                const login = await getUserLogin();

                await sendRequest(`/api/${login}/searchForNewContacts`, JSON.stringify({ search_username: searchString }),
                    (foundContacts) =>
                    {
                        clearSearchedContactsHTML();
                        for (let i = 0; i < foundContacts.length; i++)
                        {
                            addSearchContactToHTML(foundContacts[i])
                        }
                    },
                    (badRespJSON) =>
                    {
                        console.log(badRespJSON);
                    }
                );

                canSendReqForSearch = true;
            }
        }
        else
        {
            for (let i = 0; i < contacts_div.children.length; i++)
            {
                if( contacts_div.children[i].className == 'contact_div')
                {
                    contacts_div.children[i].style.display = 'inline-block';
                }
            }

            clearSearchedContactsHTML();
        }

    }

    async function addToContacts(contact_login)
    {
        let found_contact_id = null;
        for (let i = 0; i < contacts_div.children.length; i++)
        {
            if(contacts_div.children[i].className == 'search_contact_div' &&
               contacts_div.children[i].dataset.login.indexOf(contact_login) == 0)
            {
                found_contact_id = contacts_div.children[i].dataset.user_id;

                let contactInfo =
                {
                    contact: contacts_div.children[i].dataset.user_id,
                    username: contacts_div.children[i].dataset.username,
                    path_to_avatar: contacts_div.children[i].dataset.path_to_avatar,
                    status: parseInt(contacts_div.children[i].dataset.status),
                    is_blocked:  contacts_div.children[i].dataset.is_blocked == 'true',
                    unread_messages_amount: 0
                };

                const login = await getUserLogin();

                await sendRequest(`/api/${login}/addContact/${contact_login}`, JSON.stringify({}),
                        async (respObj_newContact) =>
                        {
                            contactInfo.chat_id = respObj_newContact.chat_id;
                            addContactToHTML(contactInfo, false);
                            contacts_div.removeChild(contacts_div.children[i]);

                            const user_id = await getUserId();

                            await sendRequest(`/api/${login}/info`, JSON.stringify({}),
                                (respObj) =>
                                {
                                    let contactInfoForOtherContact =
                                    {
                                        chat_id: respObj_newContact.chat_id,
                                        contact: user_id,
                                        login: login,
                                        username: respObj.username,
                                        path_to_avatar: respObj.path_to_avatar,
                                        status: parseInt(respObj.status),
                                        is_blocked:  respObj.is_blocked == 'true',
                                        unread_messages_amount: 0
                                    };

                                    socket.emit('broadcast_add_contact', found_contact_id, contactInfoForOtherContact);
                                },
                                (badRespJSON) => { console.log(badRespJSON); }
                            );
                        },
                        (badRespJSON) =>
                        {
                            console.log(badRespJSON);
                        }
                );
            }
        }
    }

    async function deleteFromChats(selectedChatNode)
    {
        if(selectedChatNode)
        {
            const login = await getUserLogin();
            if(selectedChatNode.dataset.chat_kind == 0)
            {
                console.log(`/api/${login}/deleteContact/${selectedChatNode.dataset.login}`);
                await sendRequest(`/api/${login}/deleteContact/${selectedChatNode.dataset.login}`, JSON.stringify({}),
                    async (respObj) =>
                    {
                        const user_id = await getUserId();
                        console.log('deleted')
                        socket.emit('broadcast_delete_contact', respObj.chat_id, user_id, selectedChatNode.dataset.contact);
                        resetChatSelection();
                        deleteChatHTMLbyId(respObj.chat_id);

                    },
                    (badRespJSON) =>
                    {
                        console.log(badRespJSON);
                    }
                );
            }
            else
            {
                await sendRequest(`/api/leaveFromConv`, JSON.stringify({request_login: login, chat_id_string: selectedChatNode.id}),
                    async (respObj) =>
                    {
                        const user_id = await getUserId();
                        socket.emit('broadcast_leave_conv', selectedChatNode.id, user_id);
                        resetChatSelection();
                        deleteChatHTMLbyId(respObj.chat_id);

                    },
                    (badRespJSON) =>
                    {
                        console.log(badRespJSON);
                    }
                );
            }
        }
    }

    async function refreshContactsAndConvs()
    {
        const login = await getUserLogin();
        clearContactsHTML();
        await sendRequest(`/api/${login}/contacts`, JSON.stringify({}),
            async (contacts) =>
            {
                await sendRequest(`/api/${login}/conversations`, JSON.stringify({}),
                    (convs) =>
                    {
                        for (let i = 0; i < contacts.length; i++)
                        {
                            addContactToHTML(contacts[i], true);
                        }

                        for (let i = 0; i < convs.length; i++)
                        {
                            addConvToHTML(convs[i], true);
                        }
                    },
                    (badRespJSON) =>
                    {
                        console.log(badRespJSON);
                    }
                );
            },
            (badRespJSON) =>
            {
                console.log(badRespJSON);
            }
        );
    }

    function clearContactsHTML()
    {
        contacts_div.innerHTML = "";
    }

    function deleteChatHTMLbyId(chat_id)
    {
        document.getElementById(chat_id).remove();
    }

    function clearSearchedContactsHTML()
    {
        for (let i = 0; i < contacts_div.children.length; i++)
        {
            if( contacts_div.children[i].className == 'search_contact_div')
            {
                contacts_div.removeChild(contacts_div.children[i]);
            }
        }
    }

    function addContactToHTML(contactInfo, visibleAfterCreation)
    {
        contacts_div.innerHTML += `<div class='contact_div' id='${contactInfo.chat_id}' onclick="selectChat('${contactInfo.chat_id}')" style="display: ${visibleAfterCreation ? 'inline-block' : 'none'}"
                                                                                        data-login='${contactInfo.login}'
                                                                                        data-chat_kind=0
                                                                                        data-contact='${contactInfo.contact}'
                                                                                        data-username='${contactInfo.username}'  >
                                        <div class='contact'>
                                            <img class='avatar-image' src='${contactInfo.path_to_avatar}' style='margin-right: 7px' >
                                            <div class='text'>
                                                <h6>${contactInfo.username}</h6>
                                                ${getContactStatusHTML(contactInfo.contact, contactInfo.status, contactInfo.is_blocked)}
                                                <p class='text-muted' style='visibility: hidden'>placeholderplaceholder111111</p>
                                            </div>
                                            <div align='center'>
                                                <span class='badge bg-secondary' id='${contactInfo.chat_id + "_uma"}' style="visibility: ${contactInfo.unread_messages_amount > 0 ? 'visible' : 'hidden'}" >
                                                    ${contactInfo.unread_messages_amount}
                                                </span>
                                            </div>
                                        </div>
                                        <hr/>
                                    </div>`;
    }

    function addConvToHTML(convInfo, visibleAfterCreation)
    {
        contacts_div.innerHTML += `<div class='contact_div' id='${convInfo.chat_id}' onclick="selectChat('${convInfo.chat_id}')" style="display: ${visibleAfterCreation ? 'inline-block' : 'none'}"
                                                                                        data-chat_kind=1
                                                                                        data-username='${convInfo.chat_title}'  >
                                        <div class='contact'>
                                            <img class='avatar-image' src='${convInfo.chat_avatar_path}' style='margin-right: 7px' >
                                            <div class='text'>
                                                <h6>${convInfo.chat_title}</h6>
                                                <p class='text-muted' id="${convInfo.chat_id + '_mema'}"> ${convInfo.members_amount} members</p>
                                                <p class='text-muted' style='visibility: hidden'>placeholderplaceholder111111</p>
                                            </div>
                                            <div align='center'>
                                                <span class='badge bg-secondary' id='${convInfo.chat_id + "_uma"}' style="visibility: ${convInfo.unread_messages_amount > 0 ? 'visible' : 'hidden'}" >
                                                    ${convInfo.unread_messages_amount}
                                                </span>
                                            </div>
                                        </div>
                                        <hr/>
                                    </div>`;
    }

    function addSearchContactToHTML(searchContactInfo)
    {
        contacts_div.innerHTML += `<div class='search_contact_div'  id='${searchContactInfo.user_id}'
                                                                    data-user_id='${searchContactInfo.user_id}'
                                                                    data-login='${searchContactInfo.login}'
                                                                    data-username='${searchContactInfo.username}'
                                                                    data-path_to_avatar='${searchContactInfo.path_to_avatar}'>
                                        <div class='contact'>
                                            <img class='avatar-image' src='${searchContactInfo.path_to_avatar}' style='margin-right: 7px' >
                                            <div class='text'>
                                                <h6>${searchContactInfo.username}</h6>
                                                ${getContactStatusHTML(searchContactInfo.user_id, searchContactInfo.status, searchContactInfo.is_blocked)}
                                                <p class='text-muted' style='visibility: hidden'>placeholderplaceholder111111</p>
                                            </div>
                                            <div align='center'>
                                                <i class="bi bi-person-plus-fill" style="color: var(--dark-grey-color)" onclick="addToContacts('${searchContactInfo.login}')"></i>
                                            </div>
                                        </div>
                                        <hr/>
                                    </div>`;
    }

    async function refreshUnreadMessagesAmount(chat_id)
    {
        await sendRequest(`/api/chat/countUnreadMessages`, JSON.stringify({chat_id: chat_id}),
            (resObj) =>
            {
                const uma = document.getElementById(resObj.chat_id + '_uma');
                if(uma)
                {
                    uma.style.visibility = resObj.unread_messages_amount > 0 ? 'visible' : 'hidden';
                    uma.innerHTML = resObj.unread_messages_amount;
                }
            },
            (badRespJSON) =>
            {
                console.log(badRespJSON);
            }
        );
    }

    function selectChat(chat_id)
    {
        if(selectedChatNode)
        {
            resetChatSelection();
        }

        selectedChatNode = document.getElementById(chat_id);
        selectedChatNode.children[0].style.background = 'var(--blue-color)';

        document.getElementById('deleteFromContactsBtn').style.visibility = 'visible';
        refreshChatPanel(chat_id);
    }

    function resetChatSelection()
    {
        selectedChatNode.children[0].style.background = 'var(--mainbackground-color)';
        selectedChatNode = null;
        document.getElementById('deleteFromContactsBtn').style.visibility = 'hidden';
        refreshChatPanel(null);
    }

    function refreshContactStatus(user_id, status, new_blocked_status)
    {
        let contact_statusHTML = document.getElementById(`${user_id}_s`);

        if(contact_statusHTML)
        {
            if(new_blocked_status)
            {
                contact_statusHTML.dataset.status = 'blocked';
                contact_statusHTML.innerHTML = 'User blocked';
            }
            else
            {
                if(contact_statusHTML && contact_statusHTML.dataset.status != 'blocked' || !new_blocked_status)
                {
                    switch (status)
                    {
                        case 0:
                            contact_statusHTML.dataset.status = 'offline';
                            contact_statusHTML.innerHTML = 'Offline';
                            break;
                        case 1:
                            contact_statusHTML.dataset.status = 'online';
                            contact_statusHTML.innerHTML = 'Online';
                            break;
                    }
                }
            }
        }
    }

    function getContactStatusHTML(contact_id, contact_status, contact_is_blocked)
    {
       if(contact_is_blocked)
       {
           return `<p class='text-muted' id='${contact_id}_s' data-status='blocked' >User blocked</p>`;
       }

       return `<p class='text-muted' id='${contact_id}_s' data-status=${contact_status > 0 ? 'online' : 'offline'} >${contact_status > 0 ? 'Online' : 'Offline'}</p>`;
    }

    function refreshChatMembersAmount(chat_id, new_amount)
    {
        let chat_members_amountHTML = document.getElementById(`${chat_id}_mema`);
        if(chat_members_amountHTML)
        {
            chat_members_amountHTML.innerHTML = `${new_amount} members`;
        }
    }

</script>

